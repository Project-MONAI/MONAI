{
    "bundle_root": "tests/testing_data",
    "dataset_dir": "@bundle_root",
    "val_interval": 1,
    "imports": [
        "$import os"
    ],
    "device": "$torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
    "network_def": {
        "_target_": "DenseNet121",
        "spatial_dims": 2,
        "in_channels": 1,
        "out_channels": 6
    },
    "network": "$@network_def.to(@device)",
    "loss": {
        "_target_": "torch.nn.CrossEntropyLoss"
    },
    "optimizer": {
        "_target_": "torch.optim.Adam",
        "params": "$@network.parameters()",
        "lr": 0.0001
    },
    "train": {
        "training_transforms": [
            {
                "_target_": "LoadImaged",
                "keys": [
                    "image"
                ],
                "image_only": true
            },
            {
                "_target_": "EnsureChannelFirstD",
                "keys": [
                    "image"
                ]
            },
            {
                "_target_": "ScaleIntensityd",
                "keys": [
                    "image"
                ]
            },
            {
                "_target_": "RandRotated",
                "keys": [
                    "image"
                ],
                "range_x": 15,
                "prob": 0.5,
                "keep_size": true
            },
            {
                "_target_": "RandFlipd",
                "keys": [
                    "image"
                ],
                "spatial_axis": 0,
                "prob": 0.5
            },
            {
                "_target_": "RandZoomd",
                "keys": [
                    "image"
                ],
                "min_zoom": 0.9,
                "max_zoom": 1.1,
                "prob": 0.5
            }
        ],
        "preprocessing": {
            "_target_": "Compose",
            "transforms": "$@train#training_transforms"
        },
        "dataset": {
            "_target_": "Dataset",
            "data": [
                {
                    "image": "$os.path.join(@dataset_dir, 'image0.jpeg')",
                    "label": 0
                },
                {
                    "image": "$os.path.join(@dataset_dir, 'image1.jpeg')",
                    "label": 1
                }
            ],
            "transform": "@train#preprocessing"
        },
        "dataloader": {
            "_target_": "DataLoader",
            "dataset": "@train#dataset",
            "batch_size": 3,
            "shuffle": true,
            "num_workers": 2
        },
        "inferer": {
            "_target_": "SimpleInferer"
        },
        "handlers": [
            {
                "_target_": "ValidationHandler",
                "validator": "@validate#evaluator",
                "epoch_level": true,
                "interval": "@val_interval"
            },
            {
                "_target_": "StatsHandler",
                "tag_name": "train_loss",
                "output_transform": "$monai.handlers.from_engine(['loss'], first=True)"
            }
        ],
        "trainer": {
            "_target_": "SupervisedTrainer",
            "max_epochs": 2,
            "device": "@device",
            "train_data_loader": "@train#dataloader",
            "network": "@network",
            "loss_function": "@loss",
            "optimizer": "@optimizer",
            "inferer": "@train#inferer",
            "train_handlers": "@train#handlers"
        }
    },
    "validate": {
        "preprocessing": {
            "_target_": "Compose",
            "transforms": [
                {
                    "_target_": "LoadImaged",
                    "keys": [
                        "image"
                    ],
                    "image_only": true
                },
                {
                    "_target_": "EnsureChannelFirstD",
                    "keys": [
                        "image"
                    ]
                },
                {
                    "_target_": "ScaleIntensityd",
                    "keys": [
                        "image"
                    ]
                }
            ]
        },
        "dataset": {
            "_target_": "Dataset",
            "data": [
                {
                    "image": "$os.path.join(@dataset_dir, 'image0.jpeg')",
                    "label": 0
                },
                {
                    "image": "$os.path.join(@dataset_dir, 'image1.jpeg')",
                    "label": 1
                }
            ],
            "transform": "@validate#preprocessing"
        },
        "dataloader": {
            "_target_": "DataLoader",
            "dataset": "@validate#dataset",
            "batch_size": 1,
            "shuffle": false,
            "num_workers": 2
        },
        "inferer": {
            "_target_": "SimpleInferer"
        },
        "postprocessing": {
            "_target_": "Compose",
            "transforms": [
                {
                    "_target_": "Activationsd",
                    "keys": "pred",
                    "softmax": true
                }
            ]
        },
        "key_metric": {
            "accuracy": {
                "_target_": "ignite.metrics.Accuracy",
                "output_transform": "$monai.handlers.from_engine(['pred', 'label'])"
            }
        },
        "handlers": [
            {
                "_target_": "StatsHandler",
                "iteration_log": false
            }
        ],
        "evaluator": {
            "_target_": "SupervisedEvaluator",
            "device": "@device",
            "val_data_loader": "@validate#dataloader",
            "network": "@network",
            "inferer": "@validate#inferer",
            "val_handlers": "@validate#handlers",
            "postprocessing": "@validate#postprocessing",
            "key_val_metric": "@validate#key_metric"
        }
    },
    "initialize": [
        "$monai.utils.set_determinism(seed=123)"
    ],
    "run": [
        "$@train#trainer.run()"
    ],
    "finalize": [
        "$monai.utils.set_determinism(seed=None)"
    ]
}
